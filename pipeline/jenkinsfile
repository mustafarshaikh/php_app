pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'php_app'
        DOCKER_NETWORK = 'infra_default'
    }

    stages {
        stage('Checkout') {
            steps {
                // Pull the latest code from the repository
                git branch: 'main', credentialsId: 'localjenkins', url: 'git@github.com:mustafarshaikh/php_app.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    // Build the Docker image and tag it with the build ID
                    docker.build("${DOCKER_IMAGE}:${env.BUILD_ID}")
                }
            }
        }

        stage('Lint') {
            steps {
                script {
                    // Run PHP_CodeSniffer with custom configuration
                    docker.image("${DOCKER_IMAGE}:${env.BUILD_ID}").inside {
                        // Ignore errors and warnings by using || true
                        sh 'phpcs --standard=/var/www/html/phpcs.xml /var/www/html || true'
                    }
                }
            }
        }

        stage('Static Analysis') {
            steps {
                script {
                    // Run PHPStan
                    docker.image("${DOCKER_IMAGE}:${env.BUILD_ID}").inside {
                        // Continue even if there are warnings
                        sh 'phpstan analyse /var/www/html --level=max || true'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run the Docker container and perform a health check
                    docker.image("${DOCKER_IMAGE}:${env.BUILD_ID}").inside {
                        sh 'php --version' // Example command to check PHP version
                    }
                }
            }
        }

        stage('Deploy') {
            environment {
                MYSQL_USERNAME = credentials('MYSQL_USERNAME')
                MYSQL_PASSWORD = credentials('MYSQL_PASSWORD')
                MYSQL_DB = credentials('MYSQL_DB')
                MYSQL_HOST = credentials('MYSQL_HOST')
            }
            steps {
                script {
                    // Stop and remove any existing PHP application container
                    sh """
                    docker stop php_app || true
                    docker rm php_app || true
                    """

                    // Run the new PHP application container with environment variables
                    sh """
                    docker run -d --name php_app --network ${DOCKER_NETWORK} -p 80:80 \
                        -e MYSQL_USERNAME=${MYSQL_USERNAME} \
                        -e MYSQL_PASSWORD=${MYSQL_PASSWORD} \
                        -e MYSQL_DB=${MYSQL_DB} \
                        -e MYSQL_HOST=${MYSQL_HOST} \
                        ${DOCKER_IMAGE}:${env.BUILD_ID}
                    """
                }
            }
        }


        stage('Verify Connection') {
            steps {
                script {
                    // Verify the PHP application can connect to MySQL
                    def responseCode = sh(
                        script: """
                        sleep 10 # Give the container some time to start and connect
                        docker exec php_app curl -s -o /dev/null -w "%{http_code}" http://localhost/
                        """,
                        returnStdout: true
                    ).trim()
                    if (responseCode != '200') {
                        error("HTTP response code is not 200: ${responseCode}")
                    } else {
                        echo "HTTP response code is 200: OK"
                    }
                }
            }
        }
    }
}
